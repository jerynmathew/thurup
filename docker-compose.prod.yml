version: "3.8"

# Production Docker Compose configuration
# Usage: docker-compose -f docker-compose.prod.yml up -d

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "18081:18081"
    environment:
      # Logging - JSON for production
      - LOG_JSON=true
      - LOG_LEVEL=WARNING

      # Database - use PostgreSQL in production
      # - DATABASE_URL=postgresql+asyncpg://user:pass@db:5432/thurup
      - DATABASE_URL=sqlite+aiosqlite:///./thurup.db

      # CORS - Update with your production domain
      - CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

      # Admin credentials - USE STRONG PASSWORDS IN PRODUCTION!
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}

      # Cleanup settings (in seconds)
      - CLEANUP_INTERVAL=1800
      - LOBBY_TIMEOUT=3600
      - ACTIVE_TIMEOUT=7200
      - COMPLETED_TIMEOUT=86400

      # Game timing
      - TRICK_VIEW_DELAY=2.5
    volumes:
      - backend-data:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:18081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "80:5173"  # Expose on port 80 for production
    environment:
      # Backend API URL - Update with your production domain
      - VITE_API_BASE_URL=https://api.yourdomain.com
      - VITE_WS_BASE_URL=wss://api.yourdomain.com
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Optional: Nginx reverse proxy for production
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - backend
  #     - frontend
  #   restart: always

  # Optional: PostgreSQL database for production
  # db:
  #   image: postgres:15-alpine
  #   environment:
  #     - POSTGRES_USER=thurup
  #     - POSTGRES_PASSWORD=${DB_PASSWORD}
  #     - POSTGRES_DB=thurup
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U thurup"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: always

volumes:
  backend-data:
    driver: local
  # postgres-data:
  #   driver: local
